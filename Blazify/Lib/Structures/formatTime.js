"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatTime = void 0;
function formatTime(milliseconds, minimal = false) {
    if (!milliseconds || isNaN(milliseconds) || milliseconds <= 0) {
        throw new RangeError("Utils#formatTime(milliseconds: number) Milliseconds must be a number greater than 0");
    }
    const times = {
        years: 0,
        months: 0,
        weeks: 0,
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0,
    };
    while (milliseconds > 0) {
        if (milliseconds - 31557600000 >= 0) {
            milliseconds -= 31557600000;
            times.years++;
        }
        else if (milliseconds - 2628000000 >= 0) {
            milliseconds -= 2628000000;
            times.months++;
        }
        else if (milliseconds - 604800000 >= 0) {
            milliseconds -= 604800000;
            times.weeks += 7;
        }
        else if (milliseconds - 86400000 >= 0) {
            milliseconds -= 86400000;
            times.days++;
        }
        else if (milliseconds - 3600000 >= 0) {
            milliseconds -= 3600000;
            times.hours++;
        }
        else if (milliseconds - 60000 >= 0) {
            milliseconds -= 60000;
            times.minutes++;
        }
        else {
            times.seconds = Math.round(milliseconds / 1000);
            milliseconds = 0;
        }
    }
    const finalTime = [];
    let first = false;
    for (const [k, v] of Object.entries(times)) {
        if (minimal) {
            if (v === 0 && !first) {
                continue;
            }
            finalTime.push(v < 10 ? `0${v}` : `${v}`);
            first = true;
            continue;
        }
        if (v > 0) {
            finalTime.push(`${v} ${v > 1 ? k : k.slice(0, -1)}`);
        }
    }
    let time = finalTime.join(minimal ? ":" : ", ");
    if (time.includes(",")) {
        const pos = time.lastIndexOf(",");
        time = `${time.slice(0, pos)} and ${time.slice(pos + 1)}`;
    }
    return time;
}
exports.formatTime = formatTime;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0VGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL1NyYy9MaWIvU3RydWN0dXJlcy9mb3JtYXRUaW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLFNBQWdCLFVBQVUsQ0FBQyxZQUFvQixFQUFFLE9BQU8sR0FBRyxLQUFLO0lBQzVELElBQUksQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksSUFBSSxDQUFDLEVBQUU7UUFDM0QsTUFBTSxJQUFJLFVBQVUsQ0FBQyxxRkFBcUYsQ0FBQyxDQUFDO0tBQy9HO0lBRUQsTUFBTSxLQUFLLEdBQUc7UUFDVixLQUFLLEVBQUUsQ0FBQztRQUNSLE1BQU0sRUFBRSxDQUFDO1FBQ1QsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLEVBQUUsQ0FBQztRQUNQLEtBQUssRUFBRSxDQUFDO1FBQ1IsT0FBTyxFQUFFLENBQUM7UUFDVixPQUFPLEVBQUUsQ0FBQztLQUNiLENBQUM7SUFDRixPQUFPLFlBQVksR0FBRyxDQUFDLEVBQUU7UUFDckIsSUFBSSxZQUFZLEdBQUcsV0FBVyxJQUFJLENBQUMsRUFBRTtZQUNqQyxZQUFZLElBQUksV0FBVyxDQUFDO1lBQzVCLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNqQjthQUNJLElBQUksWUFBWSxHQUFHLFVBQVUsSUFBSSxDQUFDLEVBQUU7WUFDckMsWUFBWSxJQUFJLFVBQVUsQ0FBQztZQUMzQixLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDbEI7YUFDSSxJQUFJLFlBQVksR0FBRyxTQUFTLElBQUksQ0FBQyxFQUFFO1lBQ3BDLFlBQVksSUFBSSxTQUFTLENBQUM7WUFDMUIsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDcEI7YUFDSSxJQUFJLFlBQVksR0FBRyxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQ25DLFlBQVksSUFBSSxRQUFRLENBQUM7WUFDekIsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2hCO2FBQ0ksSUFBSSxZQUFZLEdBQUcsT0FBTyxJQUFJLENBQUMsRUFBRTtZQUNsQyxZQUFZLElBQUksT0FBTyxDQUFDO1lBQ3hCLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNqQjthQUNJLElBQUksWUFBWSxHQUFHLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDaEMsWUFBWSxJQUFJLEtBQUssQ0FBQztZQUN0QixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDbkI7YUFDSTtZQUNELEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDaEQsWUFBWSxHQUFHLENBQUMsQ0FBQztTQUNwQjtLQUNKO0lBQ0QsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNsQixLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4QyxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDbkIsU0FBUzthQUNaO1lBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDMUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNiLFNBQVM7U0FDWjtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNQLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN4RDtLQUNKO0lBQ0QsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUM3RDtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFqRUQsZ0NBaUVDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFRpbWUobWlsbGlzZWNvbmRzOiBudW1iZXIsIG1pbmltYWwgPSBmYWxzZSkge1xuICAgIGlmICghbWlsbGlzZWNvbmRzIHx8IGlzTmFOKG1pbGxpc2Vjb25kcykgfHwgbWlsbGlzZWNvbmRzIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVdGlscyNmb3JtYXRUaW1lKG1pbGxpc2Vjb25kczogbnVtYmVyKSBNaWxsaXNlY29uZHMgbXVzdCBiZSBhIG51bWJlciBncmVhdGVyIHRoYW4gMFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB0aW1lcyA9IHtcbiAgICAgICAgeWVhcnM6IDAsXG4gICAgICAgIG1vbnRoczogMCxcbiAgICAgICAgd2Vla3M6IDAsXG4gICAgICAgIGRheXM6IDAsXG4gICAgICAgIGhvdXJzOiAwLFxuICAgICAgICBtaW51dGVzOiAwLFxuICAgICAgICBzZWNvbmRzOiAwLFxuICAgIH07XG4gICAgd2hpbGUgKG1pbGxpc2Vjb25kcyA+IDApIHtcbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcyAtIDMxNTU3NjAwMDAwID49IDApIHtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyAtPSAzMTU1NzYwMDAwMDtcbiAgICAgICAgICAgIHRpbWVzLnllYXJzKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWlsbGlzZWNvbmRzIC0gMjYyODAwMDAwMCA+PSAwKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgLT0gMjYyODAwMDAwMDtcbiAgICAgICAgICAgIHRpbWVzLm1vbnRocysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1pbGxpc2Vjb25kcyAtIDYwNDgwMDAwMCA+PSAwKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgLT0gNjA0ODAwMDAwO1xuICAgICAgICAgICAgdGltZXMud2Vla3MgKz0gNztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtaWxsaXNlY29uZHMgLSA4NjQwMDAwMCA+PSAwKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgLT0gODY0MDAwMDA7XG4gICAgICAgICAgICB0aW1lcy5kYXlzKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWlsbGlzZWNvbmRzIC0gMzYwMDAwMCA+PSAwKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgLT0gMzYwMDAwMDtcbiAgICAgICAgICAgIHRpbWVzLmhvdXJzKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWlsbGlzZWNvbmRzIC0gNjAwMDAgPj0gMCkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzIC09IDYwMDAwO1xuICAgICAgICAgICAgdGltZXMubWludXRlcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGltZXMuc2Vjb25kcyA9IE1hdGgucm91bmQobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZpbmFsVGltZSA9IFtdO1xuICAgIGxldCBmaXJzdCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHRpbWVzKSkge1xuICAgICAgICBpZiAobWluaW1hbCkge1xuICAgICAgICAgICAgaWYgKHYgPT09IDAgJiYgIWZpcnN0KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbFRpbWUucHVzaCh2IDwgMTAgPyBgMCR7dn1gIDogYCR7dn1gKTtcbiAgICAgICAgICAgIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2ID4gMCkge1xuICAgICAgICAgICAgZmluYWxUaW1lLnB1c2goYCR7dn0gJHt2ID4gMSA/IGsgOiBrLnNsaWNlKDAsIC0xKX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgdGltZSA9IGZpbmFsVGltZS5qb2luKG1pbmltYWwgPyBcIjpcIiA6IFwiLCBcIik7XG4gICAgaWYgKHRpbWUuaW5jbHVkZXMoXCIsXCIpKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRpbWUubGFzdEluZGV4T2YoXCIsXCIpO1xuICAgICAgICB0aW1lID0gYCR7dGltZS5zbGljZSgwLCBwb3MpfSBhbmQgJHt0aW1lLnNsaWNlKHBvcyArIDEpfWA7XG4gICAgfVxuICAgIHJldHVybiB0aW1lO1xufSJdfQ==